// Урок 3. Коллекции и замыкания

// 1. Есть словарь с видами чая и их стоимостью. Есть очередь людей, которые хотят заказать чай (можно представить её в виде массива видов чая, которые хотят заказать).
// Необходимо последовательно выводить в консоль сколько заплатит покупатель (необходимо вывести его номер по порядку, чай, который он заказал, и стоимость).

let teas = ["черный": 100, "зеленый": 120, "фруктовый": 150]
let queue = ["зеленый", "фруктовый", "черный"]
for (index, tea) in queue.enumerated() {
    if let price = teas[tea] {
        print("Покупатель №\(index+1) заказал чай \(tea) за \(price) рублей.")
    } else {
        print("Извините, у нас нет такого вида чая.")
    }
}

// 2.Есть массив [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]. Необходимо создать новый массив, который будет состоять из элементов старого, но не должно быть nil, не должно быть 0 и 4, а также массив должен быть отсортирован по возрастанию.

var array = [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]
let filteredArray = array.compactMap { $0 }
    .filter { $0 != 0 && $0 != 4 }
    .sorted()
print(filteredArray)

// 3.Написать функцию, которая на вход принимает целое число, а возвращает массив, который сформирован по следующим правилам: количество элементов соответствует переданному числу, массив начинается с 1, каждый последующий элемент больше предыдущего в 2 раза.
// Для использования функции pow() необходимо подключить: import Foundation
// Вариант 1 (с использованием функции pow()
func createArray(_ number: Int) -> [Int] {
    var resultArray: [Int] = []
    
    for i in 1...number {
        resultArray.append(1 * Int(pow(2.0, Double(i-1))))
    }
    
    return resultArray
}

// Пример использования
let newArray = createArray(5)
print(newArray) // [1, 2, 4, 8, 16]

// Вариант 2 (без использования функции pow()
func generateArray(number: Int) -> [Int] {
var resultArray: [Int] = []
var currentValue = 1
for _ in 0..<number {
    resultArray.append(currentValue)
    currentValue *= 2
}
return resultArray
}

// Пример использования
let result = generateArray(number: 5)
print(result) // [1, 2, 4, 8, 16]
